Mergesort:
Teilt immer in der mitte (außer ungerade anzahl, dann eine seite größer, egal)
--> Bis arraygröße 2 (lässt sich gut vergleichen)
(divide schritt)

conquer schritt:
--> Positionen in zweier arrays (ganz unten) tauschen falls notwendig.
danach: mergen!
--> Zusammenführen von den beiden arrays. vergleicht immer der größe nach.
z.B. 7,15 1,10 = 7 mit 1 vergleichen, 1 schreiben, 7 mit 10 vergleichen, etc.

7 15	1 10	5 6	4
1 7 10 15	4 5 6
1 4 5 6 7 10 15

--> Vergleichsvariable rutscht immer nach rechts wenn element hineingeschrieben wird (fertig sortiert)

Speicherkomplexität = n (nicht inplace!)



External mergesort: Filesystem nutzen um externe (große daten!) zu sortieren (welche nicht in den arbeitspeicher passen)

n=8		7 6 3 8 1 5 2 6

In files aufteilen (wechselseitig einlesen)
f0: 7 3 1 2
f1: 6 8 5 6

--> In "Läufe" (p) der Länge k aufteilen
p = m/k		// m = länge der files (in diesem fall, 4)
		// k = länge der läufe (in diesem fall, 1)
m = p * k + q 	// q = restlauf (wenn z.B. ein file weniger groß ist wie das andere. 7 elemente = m1=4, m2=3 --> q = 1)


Zurück zu durchführung:
f0: 7 3 1 2
f1: 6 8 5 6
- da kein inplace verfahre, neue files. (+ sortieren! vergleicht 7 mit 6,3 mit 8, etc.)
g0: 6 7 1 5 
g1: 3 8 2 6

danach: k erhöhen! (k = 2, anzahl der elemente je lauf)
f0: 3 6 7 8 (3 und 6, 6 und 8, 7 und 8 vergleichen, wie ganz oben beschrieben)
f1: 1 2 5 6 

wieder: k erhöhen! (immer *2 --> k = 4)
(3 vs 1, 3 vs 2, 3 vs 5, 6 vs 5, 6 vs 6, 7 vs 6, 7, 8
g0: 1 2 3 5 6 6 7 8 (sortiert!)
g1: -





Klasse: FileManipulator
[f0 f1]
[g0 g1]
f0: 0,0 | g0: 1,0
f1: 0,1 | g1: 1,1

getSrc(int i)
getDst(int i)

zuerst f0,f1 source und g0,g1 dst, danach umgegekehrt --> Quelle/Ziel swappen zwischen aufrufen!
--> Boolean definieren um Zustand zu merken (swap = false/true)
--> + KONSTANTEN (LEFT, RIGHT für f0 (left) und f1(right) etc.)